package com.challenage.qt;

import org.junit.jupiter.api.Test;

import java.io.IOException;

import static org.junit.jupiter.api.Assertions.*;

class NumberMinMaxAvgTest {

    @Test
    void solution() {
        long memBefore = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        NumberMinMaxAvg avg = new NumberMinMaxAvg();
        avg.solution();
        long memAfter = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        System.out.println("Memory increased: "+ (memAfter - memBefore));
    }//Memory increased: 63471680


    @Test
    void parseLine() {
        NumberMinMaxAvg avg = new NumberMinMaxAvg();
        String input = "568486,467267,515599,156161,987902,332055,701172,97655,958369,331300,248742,787197,221421,647100,76712,909530,235145,807222,552578,942789,602201,891728,365087,412433,805757,719217,146442,888654,656656,673143,759242,413335,197556,351811,938232,928121,780666,596730,688472,580863,317586,910495,363527,185764,858696,31142,497003,749779,937675,473054,926895,469006,724832,216401,77315,933780,223649,573069,225784,581973,919012,850481,243034,205393,793302,74644,426174,68309,592511,850430,673905,806936,857609,367932,764589,358836,700151,520787,517550,293655,489423,19187,267866,525033,990314,246921,555868,592385,292431,662686,656240,657044,557549,969548,807260,211688,432792,475817,987394,43943,590730,317751,505817,409909,402780,710819,615698,22686,471427,468784,451692,971342,765840,593427,123817,376965,191962,701186,187491,291521,79395,304599,345325,639120,822365,734638,849744,129363,244051,498004,649077,159231,741545,278636,403369,280105,410414,72601,341037,635223,280826,635996,767641,657353,356920,199227,996730,787560,494620,633235,193620,895008,348702,554077,329226,850213,194358,740483,539139,655496,827140,114799,232874,629310,682330,186536,141017,854626,783405,243753,312453,957493,198229,45836,845557,31819,762836,382521,256301,389137,90149,684106,787080,807660,722939,32267,851623,100106,457209,875556,992907,515772,815234,649790,700069,588204,389776,71949,563860,30105,85852,91258,843432,774866,606806,525875,940916,422752,970574,69396,547383,927714,214005,19723,818049,397961,616889,458462,335375,491918,775189,213092,663295,303316,649902,883822,40200,544607,675891,529495,193094,252962,668950,400487,620609,445868,562687,132780,180149,675592,234701,221656,192507,549359,856608,529715,51524,56603,709965,597473,159729,580524,479433,47200,128562,796181,102378,234485,674416,199143,60917,104763,752086,554256,703633,378392,409881,516048,827364,877230,84614,572645,710866,632976,46659,760119,96351,890477,934461,933345,754668,132255,772801,234417,699557,418788,315873,414469,951748,252640,611593,318135,390906";
        String inputTwo = "859016,576502,684309,48469,904773,38768,103121,107170,937727,569122,772653,625916,724805,453844,312336,352187,876976,131773,354298,485416,857449,227111,826167,547999,842925,17253,575424,168262,272804,173705,757919,287061,680597,511965,389809,940598,379328,627118,662883,892158,71282,53152,795406,250122,475637,984785,247955,700222,903957,220173,387898,243756,764403,736702,548359,665068,570424,595077,914712,127310,875999,720512,951332,683303,813976,994377,910096,681617,962210,310815,605496,761550,200426,805269,825640,97674,27658,531204,752473,556007,348372,812334,904870,303959,722016,678734,253042,119377,507488,189469,727675,843674,903975,50319,371581,582144,924473,838692,438381,993191,208974,354683,832088,493256,750571,388677,334116,230306,482211,734595,904080,291206,743746,280183,441885,787239,85286,641499,188085,396618,239385,815669,236751,566496,863858,326595,459219,634949,345320,545258,575881,94139,89879,857851,48396,495623,570667,127028,162531,582730,673183,791644,710857,762051,748831,27535,256926,732992,976129,772884,561200,489401,213409,293408,961916,464086,481309,388563,280708,470058,923203,930834,102253,644132,614783,687469,373795,364246,3401,969464,941736,113146,182605,442370,600217,851434,422852,859223,643810,671717,971141,968922,494132,811140,344273,727986,76458,929968,349179,39467,136003,863033,527194,242382,550045,62570,515450,427215,254964,680023,991502,819740,19629,957335,259300,102794,153842,767487,545392,541397,997159,120149,728282,322298,189345,948936,152379,705148,911162,402843,961247,108887,537716,461245,789134,535154,518023,85590,411360,144101,768054,44185,916216,58414,937295,948698,567334,403454,422228,761674,44316,434890,467670,306268,690495,325336,335632,400688,6816,441294,463908,529268,943984,359945,409845,83391,723990,802666,940122,363693,183342,556078,354154,458557,757791,659883,693219,251857,448046,553906,322304,683103,582143,217489,490408,99527,26451,420491,48257,615673,369682,548510,885600,933459,28452,935738,420344,421173,425315,188493,474537,119945,777913,109081,603257,616819,133030,306359,10651,682554,909780,470254,508650,962338,260900,302842,577195,189004,704986,624355,135494,344504,676907,937017,600016,171810,949437,983945,704707,456214,630237,823738,528802,257494,944569,172948,663238,635390,427266,624667,790876,596742,522201,622560,735162,328702,219224,336045,419251,105765,788347,259922,70260,519696,496821,366144,889151,935548,255015,827488,536172,941564,661255,129005,284300,900658,658181,662153,672286,701592,9461,926576,703104,880398,548259,245846,575593,384993,950277,545069,909049,203068,428624,607183,810657,677864,743434,35223,397237,693542,653311,249206,958172,623783,260198,188884,483096,643993,940003,120482,771730,659390,74384,62439,352533,351867,196730,551444,937521,704140,283426,66205,99692,601886,725497,3656,120199,456077,737660,798675,477941,168202,648978,736207,579594,134731,378549,911232,746164,931526,759585,882385,801800,493741,909335,72072,541703,722196,71881,789849,907786,88944,889039,283325,22956,381030,763260,182152,745128,587453,455489,948769,749894,742878,75977,690591,333988,682128,162317,513747,634878,264964,743886,572899,500475,83611,387894,308133,812010,396883,666815,648378,153318,175848,572724,923105,770907,837973,189738,82276,620756,917413,984835,923069,825952,991450,46814,73168,78235,882645,829934,424409,859771,786492,388049,874298,531087,369943,356352,982881,616745";
        assertEquals("1,4,2087956.25,8349348,33",String.format("%d,%s",1,avg.parseLine("2323,8349348,121,33")));
        assertEquals("2,3,104525,312623,4",String.format("%d,%s",2,avg.parseLine("948,4,312623")));
        assertEquals("1,293,502175.22,996730,19187",String.format("%d,%s",1,avg.parseLine(input)));
        assertEquals("2,491,523210.52,997159,3401",String.format("%d,%s",2,avg.parseLine(inputTwo)));
    }

    @Test
    void solutionParallel() throws IOException {
        long memBefore = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        NumberMinMaxAvg avg = new NumberMinMaxAvg();
        avg.solutionParallel();
        long memAfter = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        System.out.println("Memory increased: "+ (memAfter - memBefore));
    }//Memory increased: 154529808
}